using Microsoft.Testing.Platform.Extensions.Messages;

namespace Problème_scientifique_informatique
{
    [TestClass]
    public sealed class Test1
    {

        /// <summary>
        /// Test de la fonction Taille du graphe
        /// </summary>

        [TestMethod]
        public void Test_Tailledugraphe()
        {
            int[,] matrice_relation = { { 0, 2 }, { 1, 2 }, { 2, 3 }, { 3, 4 }, { 4, 1 } };
            Graphe gra = new Graphe(matrice_relation);
            int taille = gra.TailleDuGraphe(matrice_relation);
            Assert.AreEqual(5, taille);

        }


        /// <summary>
        /// Test de la fonction Ordre du graphe
        /// </summary>

        [TestMethod]
        public void Test_OrdreDuGraphe()
        {
            int[,] matrice_relation = { { 0, 2 }, { 1, 2 }, { 2, 3 }, { 3, 4 }, { 4, 1 } };
            Graphe graphe = new Graphe(matrice_relation);
            int result = graphe.OrdreDuGraphe(matrice_relation);
            Assert.AreEqual(4, result);

        }



        /// <summary>
        /// Test de la fonction GenererListeAdjacence
        /// </summary>

        [TestMethod]
        public void Test_GenererListeAdjacence()
        {
            int[,] matrice_relation = { { 1, 3 }, { 2, 3 }, { 3, 4 }, { 4, 5 }, { 5, 2 } };
            int ordre = 5;
            Graphe g = new Graphe(matrice_relation);
            List<int>[] resultat = g.GenererListeAdjacence(matrice_relation, ordre);
            Dictionary<int, List<int>> adjacenceAttendue = new Dictionary<int, List<int>>
            {
                { 0, new List<int> { 3 } },
                { 1, new List<int> { 3, 5 } },
                { 2, new List<int> { 1, 2, 4 } },
                { 3, new List<int> { 3, 5 } },
                { 4, new List<int> { 2, 4 } }
            };
            foreach (var sommet in adjacenceAttendue.Keys)
            {
                Assert.AreEqual(adjacenceAttendue[sommet].Count, resultat[sommet].Count);
                foreach (int voisinAttendu in adjacenceAttendue[sommet])
                {
                    CollectionAssert.Contains(resultat[sommet], voisinAttendu);
                }
            }
        }


        /// <summary>
        /// Test de la fonction Graphe Connexe
        /// </summary>

        [TestMethod]
        public void Test_GrapheConnexe()
        {
            int[,] matrice_relation = { { 1, 3 }, { 2, 3 }, { 3, 4 }, { 4, 5 }, { 5, 2 } };
            int ordre = 5;
            Graphe g = new Graphe(matrice_relation);
            List<int> parcours = new List<int> { 1, 2, 3, 4, 5 };
            bool resultat = g.GrapheConnexe(parcours, ordre);
            Assert.IsTrue(resultat);
        }


        /// <summary>
        /// Test de la fonction Graphe Orienté
        /// </summary>

        [TestMethod]
        public void Test_GrapheOriente()
        {
            int[,] matrice_relation = { { 1, 2 }, { 2, 3 }, { 3, 4 }, { 4, 2 } };
            int ordre = 4;
            Graphe g = new Graphe(matrice_relation);
            List<int>[] listeAdjacence = g.GenererListeAdjacence(matrice_relation, ordre);
            bool resultat = g.GrapheOriente(listeAdjacence);
            Assert.IsTrue(resultat);
        }


        /// <summary>
        /// Test du parcours en profondeur
        /// </summary>

        [TestMethod]
        public void Test_ParcoursEnProfondeur()
        {
            int[,] matrice_relation = { { 1, 2 }, { 1, 3 }, { 2, 4 }, { 3, 5 }, { 4, 5 } };
            int ordre = 5;
            Graphe g = new Graphe(matrice_relation);
            List<int>[] listeAdjacence = g.GenererListeAdjacence(matrice_relation, ordre);
            Noeud[] noeuds = new Noeud[ordre];
            for (int i = 0; i < ordre; i++)
            {
                noeuds[i] = new Noeud(i + 1, "blanc", listeAdjacence[i]);
            }
            using (StringReader sr = new StringReader("1"))
            {
                Console.SetIn(sr);
                List<int> resultat = g.ParcoursEnProfondeurDabord(noeuds);
                List<int> resultatFiltre = resultat.Distinct().ToList();
                List<int> parcoursAttendu = new List<int> { 1, 2, 4, 5, 3 };
                Assert.AreEqual(parcoursAttendu.Count, resultatFiltre.Count);
                CollectionAssert.AreEquivalent(parcoursAttendu, resultatFiltre);
            }
            Console.SetIn(new StringReader("1"));
        }


        /// <summary>
        /// Test du parcours en largeur
        /// </summary>

        [TestMethod]
        public void Test_ParcoursEnLargeur()
        {
            int[,] matrice_relation = { { 1, 2 }, { 1, 3 }, { 2, 4 }, { 3, 5 }, { 4, 5 } };
            int ordre = 5;
            Graphe g = new Graphe(matrice_relation);
            List<int>[] listeAdjacence = g.GenererListeAdjacence(matrice_relation, ordre);
            Noeud[] noeuds = new Noeud[ordre];
            for (int i = 0; i < ordre; i++)
            {
                noeuds[i] = new Noeud(i + 1, "blanc", listeAdjacence[i]);
            }
            using (StringReader sr = new StringReader("1"))
            {
                Console.SetIn(sr);
                List<int> resultat = g.ParcoursEnLargeurDabord(noeuds);
                List<int> resultatFiltre = resultat.Distinct().ToList();
                List<int> parcoursAttendu = new List<int> { 1, 2, 3, 4, 5 };
                Assert.AreEqual(parcoursAttendu.Count, resultatFiltre.Count);
                CollectionAssert.AreEquivalent(parcoursAttendu, resultatFiltre);
            }
            Console.SetIn(new StringReader("1"));
        }

    }
}
