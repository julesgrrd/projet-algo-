using Microsoft.VisualStudio.TestTools.UnitTesting;
using Projet_PSI;
using System.Collections.Generic;
using System.Configuration;

namespace ProjetPSI
{
    [TestClass]
    public sealed class Test1
    {

        /// <summary>
        /// Test de la fonction Taille du graphe
        /// </summary>

        [TestMethod]
        public void Test_Tailledugraphe()
        {
            int[,] matrice_relation = { { 0, 2 }, { 1, 2 }, { 2, 3 }, { 3, 4 }, { 4, 1 } };
            string[,] matrice_infoStation = { { "1", "Porte Maillot" }, { "2", "Argentine" }, { "3", "Georges V" }, { "4", "Charles de Gaulle Etoile" } };
            Graphe<int> gra = new Graphe<int>(matrice_relation, matrice_infoStation);
            int taille = gra.TailleDuGraphe(matrice_relation);
            Assert.AreEqual(5, taille);

        }


        /// <summary>
        /// Test de la fonction Ordre du graphe
        /// </summary>

        [TestMethod]
        public void Test_OrdreDuGraphe()
        {
            int[,] matrice_relation = { { 0, 2 }, { 1, 2 }, { 2, 3 }, { 3, 4 }, { 4, 1 } };
            string[,] matrice_infoStation = { { "1", "Porte Maillot" }, { "2", "Argentine" }, { "3", "Georges V" }, { "4", "Charles de Gaulle Etoile" } };
            Graphe<int> graphe = new Graphe<int>(matrice_relation, matrice_infoStation);
            int result = graphe.OrdreDuGraphe(matrice_relation);
            Assert.AreEqual(4, result);

        }



        /// <summary>
        /// Test de la fonction GenererListeAdjacence
        /// </summary>

        [TestMethod]
        public void Test_GenererListeAdjacence()
        {
            int[,] matrice_relation = { { 1, 2, 1 }, { 2, 3, 0 }, { 3, 4, 1 }, { 4, 5, 1 } };  ///la matrice relation est de la forme : station départ; station arrivée; doublesens
            string[,] matrice_infoStation = { { "1", "Porte Maillot" }, { "2", "Argentine" }, { "3", "Georges V" }, { "4", "Charles de Gaulle Etoile" }, { "5", "Bourg-la-Reine" } };
            int ordre = 5;
            Graphe<int> g = new Graphe<int>(matrice_relation, matrice_infoStation);
            List<int>[] resultat = g.GenererListeAdjacence(matrice_relation, ordre);
            Dictionary<int, List<int>> adjacenceAttendue = new Dictionary<int, List<int>>
        {
            { 0, new List<int> { 2 } },
            { 1, new List<int> { 1, 3  } },
            { 2, new List<int> { 4 } },
            { 3, new List<int> { 3, 5 } },
            { 4, new List<int> { 4 } }
        };
            foreach (var sommet in adjacenceAttendue.Keys)
            {
                Assert.AreEqual(adjacenceAttendue[sommet].Count, resultat[sommet].Count);
                foreach (int voisinAttendu in adjacenceAttendue[sommet])
                {
                    CollectionAssert.Contains(resultat[sommet], voisinAttendu);
                }
            }
        }



        /// <summary>
        /// Test de la fonction GeneererMatriceAdjacence
        /// </summary>

        [TestMethod]
        public void Test_GenererMatriceAdjacence()
        {
            int[,] matrice_relation = { { 1, 2, 1, 5 }, { 2, 3, 0, 2 } };
            string[,] matrice_infoStation = { { "1", "Porte Maillot" }, { "2", "Argentine" }, { "3", "Georges V" } };
            int ordre = 3;
            Graphe<int> graphe = new Graphe<int>(matrice_relation, matrice_infoStation);
            int infini = 9999999;
            int[,] resultat = graphe.GenererMatriceAdjacence(matrice_relation, ordre);
            Assert.AreEqual(0, resultat[0, 0]);
            Assert.AreEqual(5, resultat[0, 1]);
            Assert.AreEqual(infini, resultat[0, 2]);

            Assert.AreEqual(5, resultat[1, 0]);
            Assert.AreEqual(0, resultat[1, 1]);
            Assert.AreEqual(2, resultat[1, 2]);

            Assert.AreEqual(infini, resultat[2, 0]);
            Assert.AreEqual(infini, resultat[2, 1]);
            Assert.AreEqual(0, resultat[2, 2]);
        }


        /// <summary>
        /// Test de la fonction Graphe Orienté
        /// </summary>

        [TestMethod]
        public void Test_GrapheOriente()
        {

            int[,] matrice_relation = { { 1, 2, 0 }, { 2, 3, 0 } };
            string[,] matrice_infoStation = { { "1", "Porte Maillot" }, { "2", "Argentine" }, { "3", "Georges V" }, { "4", "Charles de Gaulle Etoile" } };
            int ordre = 4;
            Graphe<int> g = new Graphe<int>(matrice_relation, matrice_infoStation);
            List<int>[] listeAdjacence = g.GenererListeAdjacence(matrice_relation, ordre);
            bool resultat = g.GrapheOriente(listeAdjacence);
            Assert.IsFalse(resultat);
        }

        /// <summary>
        /// Test Algorithme de Dijkstra
        /// </summary>

        [TestMethod]
        public void Test_AlgorithmeDijkstra()
        {

            int ordre = 3;
            int infini = 999999999;
            int[,] matriceAdjacence = { { 0, 5, infini }, { 5, 0, 2 }, { infini, 2, 0 } };
            int[,] matrice_relation = { { 1, 2, 1, 5 }, { 2, 3, 0, 2 } };
            string[,] matrice_infoStation = { { "1", "Porte Maillot" }, { "2", "Argentine" }, { "3", "Georges V" } };

            Graphe<int> graphe = new Graphe<int>(matrice_relation, matrice_infoStation);

            List<int>[] ListeAdjacence = graphe.GenererListeAdjacence(matrice_relation, ordre);

            Noeud<int>[] noeuds = new Noeud<int>[ordre];

            noeuds[0] = new Noeud<int>(1, "Paris", "blanc", ListeAdjacence[0]);
            noeuds[1] = new Noeud<int>(1, "Paris", "blanc", ListeAdjacence[1]);
            noeuds[2] = new Noeud<int>(1, "Paris", "blanc", ListeAdjacence[2]);


            using (StringReader sr = new StringReader("non\n1\n3\n"))
            {
                Console.SetIn(sr);
                List<int> chemin = graphe.AlgorithmeDijkstra(noeuds, matriceAdjacence, ordre, 1, 3);
                List<int> cheminAttendu = new List<int> { 1, 2, 3 };
                CollectionAssert.AreEqual(cheminAttendu, chemin);
            }
        }


        /// <summary>
        /// Test Algorithme de BellmannFord
        /// </summary>

        [TestMethod]
        public void Test_AlgorithmeBellmannFord()
        {

            int ordre = 3;
            int infini = 999999999;
            int[,] matriceAdjacence = { { 0, 5, infini }, { 5, 0, 2 }, { infini, 2, 0 } };
            int[,] matrice_relation = { { 1, 2, 1, 5 }, { 2, 3, 0, 2 } };
            string[,] matrice_infoStation = { { "1", "Porte Maillot" }, { "2", "Argentine" }, { "3", "Georges V" } };

            Graphe<int> graphe = new Graphe<int>(matrice_relation, matrice_infoStation);

            List<int>[] ListeAdjacence = graphe.GenererListeAdjacence(matrice_relation, ordre);

            Noeud<int>[] noeuds = new Noeud<int>[ordre];

            noeuds[0] = new Noeud<int>(1, "Paris", "blanc", ListeAdjacence[0]);
            noeuds[1] = new Noeud<int>(1, "Paris", "blanc", ListeAdjacence[1]);
            noeuds[2] = new Noeud<int>(1, "Paris", "blanc", ListeAdjacence[2]);


            using (StringReader sr = new StringReader("non\n1\n3\n"))
            {
                Console.SetIn(sr);
                List<int> chemin = graphe.AlgorithmeBellmanFord(noeuds, ordre, matriceAdjacence, 1, 3);
                List<int> cheminAttendu = new List<int> { 1, 2, 3 };
                CollectionAssert.AreEqual(cheminAttendu, chemin);
            }
        }



        /// <summary>
        /// Test Algorithme de FloydWarshall
        /// </summary>

        [TestMethod]
        public void Test_AlgorithmeFloydWarshall()
        {

            int ordre = 3;
            int infini = 999999999;
            int[,] matriceAdjacence = { { 0, 5, infini }, { 5, 0, 2 }, { infini, 2, 0 } };
            int[,] matrice_relation = { { 1, 2, 1, 5 }, { 2, 3, 0, 2 } };
            string[,] matrice_infoStation = { { "1", "Porte Maillot" }, { "2", "Argentine" }, { "3", "Georges V" } };

            Graphe<int> graphe = new Graphe<int>(matrice_relation, matrice_infoStation);

            List<int>[] ListeAdjacence = graphe.GenererListeAdjacence(matrice_relation, ordre);

            Noeud<int>[] noeuds = new Noeud<int>[ordre];

            noeuds[0] = new Noeud<int>(1, "Paris", "blanc", ListeAdjacence[0]);
            noeuds[1] = new Noeud<int>(1, "Paris", "blanc", ListeAdjacence[1]);
            noeuds[2] = new Noeud<int>(1, "Paris", "blanc", ListeAdjacence[2]);


            using (StringReader sr = new StringReader("non\n1\n3\n"))
            {
                Console.SetIn(sr);
                List<int> chemin = graphe.AlgorithmeFloydWarshall(matriceAdjacence, ordre, noeuds, 1, 3);
                List<int> cheminAttendu = new List<int> { 1, 2, 3 };
                CollectionAssert.AreEqual(cheminAttendu, chemin);
            }
        }

        ///Tests unitaires des méthodes de la classe Graphe_CuisinierClient
        

        /// <summary>
        /// Test de la méthode ConstructionGraphe
        /// </summary>
        [TestMethod]
        public void Test_ConstructionGraphe()
        {
            string[,] matrice_relation = { { "CLI001", "CUI001" }, { "CLI002", "CUI001" }, { "CLI003", "CUI002" }, { "CLI002", "CUI002" } };
            Graphe_CuisinierClient graphe = new Graphe_CuisinierClient(matrice_relation);

            Assert.IsTrue(graphe.Noeuds.ContainsKey("CLI001"));
            Assert.IsTrue(graphe.Noeuds.ContainsKey("CLI002"));
            Assert.IsTrue(graphe.Noeuds.ContainsKey("CLI003"));

            Assert.AreEqual(2, graphe.Noeuds["CUI002"].voisins.Count);
            Assert.AreEqual(1, graphe.Noeuds["CLI001"].voisins.Count);
        }


        /// <summary>
        /// Test de la méthode Test_SommetsOrdreDecroissant
        /// </summary>
        [TestMethod]
        public void Test_SommetsOrdreDecroissant()
        {
            string[,] matrice_relation = { { "CLI001", "CUI001" }, { "CLI002", "CUI001" }, { "CLI003", "CUI002" }, { "CLI002", "CUI002" } };
            Graphe_CuisinierClient graphe = new Graphe_CuisinierClient(matrice_relation);

            List<Noeud_CuisinierClient> tri = graphe.SommetsOrdreDecroissant(graphe.Noeuds);

            for (int i=1; i<tri.Count; i++)
            {
                Assert.IsTrue(tri[i - 1].voisins.Count >= tri[i].voisins.Count);
            }
        }


        /// <summary>
        /// Test de la méthode Test_AlgoWelshPowell
        /// </summary>
        [TestMethod]
        public void Test_AlgoWelshPowell()
        {
            string[,] matrice_relation = { { "CLI001", "CUI001" }, { "CLI002", "CUI001" }, { "CLI003", "CUI002" }, { "CLI002", "CUI002" } };
            Graphe_CuisinierClient graphe = new Graphe_CuisinierClient(matrice_relation);

            graphe.Algo_WelshPowell(graphe);

            foreach (Noeud_CuisinierClient noeud in graphe.Noeuds.Values)
            {
                foreach (var idVoisin in noeud.voisins)
                {
                    var voisin = graphe.Noeuds[idVoisin];
                    Assert.AreNotEqual(noeud.couleur, voisin.couleur);
                }
            }
        }


        /// <summary>
        /// Test de la méthode NombreMinCouleur
        /// </summary>
        [TestMethod]
        public void Test_NombreMinCouleur()
        {
            string[,] matrice_relation = { { "CLI001", "CUI001" }, { "CLI002", "CUI001" }, { "CLI003", "CUI002" }, { "CLI002", "CUI002" } };
            Graphe_CuisinierClient graphe = new Graphe_CuisinierClient(matrice_relation);
            graphe.Algo_WelshPowell(graphe);

            int nbChromatique = graphe.NombreMinCouleurs();

            Assert.AreEqual(nbChromatique,2);
        }

        /// <summary>
        /// Test de la méthode GrapheBiparti
        /// </summary>
        [TestMethod]
        public void Test_GrapheBiparti()
        {
            string[,] matrice_relation = { { "CLI001", "CUI001" }, { "CLI002", "CUI001" }, { "CLI003", "CUI002" }, { "CLI002", "CUI002" } };
            Graphe_CuisinierClient graphe = new Graphe_CuisinierClient(matrice_relation);
            graphe.Algo_WelshPowell(graphe);
            int nbChromatique = graphe.NombreMinCouleurs();

            bool biparti = graphe.GrapheBiparti(nbChromatique);

            Assert.AreEqual(biparti, true);
        }


        /// <summary>
        /// Test de la méthode GraphePlanaire
        /// </summary>
        [TestMethod]
        public void Test_GraphePlanaire()
        {
            string[,] matrice_relation = { { "CLI001", "CUI001" }, { "CLI002", "CUI001" }, { "CLI003", "CUI002" }, { "CLI002", "CUI002" } };
            Graphe_CuisinierClient graphe = new Graphe_CuisinierClient(matrice_relation);
            graphe.Algo_WelshPowell(graphe);
            int nbChromatique = graphe.NombreMinCouleurs();

            bool planaire = graphe.GraphePlanaire(nbChromatique);

            Assert.AreEqual(planaire, true);
        }

    }
}
