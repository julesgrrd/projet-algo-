using SkiaSharp;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;

namespace ProjetPSI
{
    public class Visuel
    {
        private Noeud<int>[] stations;    /// Tableau de noeud correspondant aux différents stations du métro
        private int[,] relations;    /// Tableau de relation entre les différentes stations (idStation, idVoisin, double-sens, poids)

        /// Constructeur de la classe Visuel
        public Visuel(Noeud<int>[] stations, int[,] relations)
        {
            this.stations = stations;
            this.relations = relations;
        }

        /// Méthode qui permet de générer l'image du plan de métro, avec les relations entre les différentes stations. Le PCC entre deux stations est mis en évidence.
        public void GenererCarteAvecChemin(string cheminFichier, List<int> chemin, int largeur = 2800, int hauteur = 2400)
        {
            /// Calcul des limites géographiques qui permettent d'unifier les coordonnées
            double minLat = stations.Min(s => s.latitude);
            double maxLat = stations.Max(s => s.latitude);
            double minLon = stations.Min(s => s.longitude);
            double maxLon = stations.Max(s => s.longitude);

            /// On crée le canevas sur lequel sera mis le plan, avec la bibliothèque SkiaSharp
            using var bitmap = new SKBitmap(largeur, hauteur);
            using var canvas = new SKCanvas(bitmap);
            canvas.Clear(SKColors.White);

            /// Permet de définir le style du dessin des lignes
            var paintLigne = new SKPaint
            {
                Style = SKPaintStyle.Stroke,
                Color = SKColors.Gray,    /// les liaisons entre les stations sont représentées en gris
                StrokeWidth = 0.8f,
                IsAntialias = true
            };

            /// Permet de définir le style du dessin du PCC
            var paintLigneChemin = new SKPaint
            {
                Style = SKPaintStyle.Stroke,
                Color = SKColors.Red,    /// le chemin du PCC est représenté en rouge
                StrokeWidth = 3,    /// on augmente la largeur du trait pour qu'il soit plus visible
                IsAntialias = true
            };

            /// Permet de définir le style du dessin des stations
            var paintStation = new SKPaint
            {
                Color = SKColors.Blue,    /// les stations sont représentées en bleu
                IsAntialias = true
            };

            /// Permet de définir le style du dessin des stations du PCC
            var paintStationChemin = new SKPaint
            {
                Color = SKColors.Red,    /// les stations comprises dans le PCC sont représentées en rouge
                IsAntialias = true
            };

            /// Permet de définir le style du texte pour les noms des stations
            var paintTexte = new SKPaint
            {
                Color = SKColors.Black,    /// les noms des stations sont représentés en noir
                TextSize = 12,
                IsAntialias = true
            };

            // Tracer toutes les liaisons entre stations
            for (int i = 0; i < relations.GetLength(0); i++)
            {
                int id1 = relations[i, 0];
                int id2 = relations[i, 1];

                var s1 = stations.FirstOrDefault(s => s.idNoeud == id1);
                var s2 = stations.FirstOrDefault(s => s.idNoeud == id2);

                if (s1 == null || s2 == null) continue;

                /// Permet de placer les stations sur l'image en fonction de la latitude et de la longitude de chacune
                var p1 = ConvertirCoordonnees(s1.longitude, s1.latitude, minLon, minLat, maxLon, maxLat, largeur, hauteur);   
                var p2 = ConvertirCoordonnees(s2.longitude, s2.latitude, minLon, minLat, maxLon, maxLat, largeur, hauteur);

                canvas.DrawLine(p1, p2, paintLigne);    /// Trace le trait entre la station p1 et la station p2
            }

            /// Tracer les liaisons du PCC en rouge
            for (int i = 0; i < chemin.Count - 1; i++)
            {
                var s1 = stations.FirstOrDefault(s => s.idNoeud == chemin[i]);
                var s2 = stations.FirstOrDefault(s => s.idNoeud == chemin[i + 1]);

                if (s1 == null || s2 == null) continue;

                var p1 = ConvertirCoordonnees(s1.longitude, s1.latitude, minLon, minLat, maxLon, maxLat, largeur, hauteur);
                var p2 = ConvertirCoordonnees(s2.longitude, s2.latitude, minLon, minLat, maxLon, maxLat, largeur, hauteur);

                canvas.DrawLine(p1, p2, paintLigneChemin);    /// Trace le trait entre les stations du PCC en rouge
            }

            /// Trace les stations sur l'image (points + texte)
            foreach (var s in stations)
            {
                var p = ConvertirCoordonnees(s.longitude, s.latitude, minLon, minLat, maxLon, maxLat, largeur, hauteur);

                var paint = chemin.Contains(s.idNoeud) ? paintStationChemin : paintStation;
                canvas.DrawCircle(p, chemin.Contains(s.idNoeud) ? 3.5f : 2, paint); /// Créé un cercle bleu ou rouge pour placer la station

                string nomCourt = s.nom.Length > 20 ? s.nom.Substring(0, 20) + "…" : s.nom;
                canvas.DrawText(nomCourt, p.X + 5, p.Y - 5, paintTexte);    /// Place le nom de la station à coté du point
            }

            /// Exporte l'image au format PNG
            using var image = SKImage.FromBitmap(bitmap);
            using var data = image.Encode(SKEncodedImageFormat.Png, 100);
            using var stream = File.OpenWrite(cheminFichier);
            data.SaveTo(stream);

            /// Ouvre automatique l'image générée
            Console.WriteLine("\nCarte avec chemin générée : PlanMetro.png");
            Process.Start(new ProcessStartInfo(cheminFichier) { UseShellExecute = true });
        }

        /// Méthode qui permet de convertir des coordonnées GPS en coordonnées adaptées à l'image
        private SKPoint ConvertirCoordonnees(double lon, double lat, double minLon, double minLat, double maxLon, double maxLat, int largeur, int hauteur)
        {
            float padding = 50f;  /// Marge autour du plan
            float x = padding + (float)((lon - minLon) / (maxLon-minLon) * (largeur - 2 * padding));
            float y = padding + (float)((maxLat - lat) / (maxLat-minLat) * (hauteur - 2 * padding));
            return new SKPoint(x, y);
        }

        /// Propriété utilisée dans les calculs de coordonnées pour calculer et retourner la latitude maximale parmi toutes les stations
        private double maxLat => stations.Max(s => s.latitude);

 


    }
}
