using SkiaSharp;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;

namespace ProjetPSI
{
    public class Visuel
    {
        private Noeud<int>[] stations;
        private int[,] relations;

        public Visuel(Noeud<int>[] stations, int[,] relations)
        {
            this.stations = stations;
            this.relations = relations;
        }

        public void GenererCarteAvecChemin(string cheminFichier, List<int> chemin, int largeur = 2800, int hauteur = 2400)
        {
            double minLat = stations.Min(s => s.latitude);
            double maxLat = stations.Max(s => s.latitude);
            double minLon = stations.Min(s => s.longitude);
            double maxLon = stations.Max(s => s.longitude);

            using var bitmap = new SKBitmap(largeur, hauteur);
            using var canvas = new SKCanvas(bitmap);
            canvas.Clear(SKColors.White);

            var paintLigne = new SKPaint
            {
                Style = SKPaintStyle.Stroke,
                Color = SKColors.Gray,
                StrokeWidth = 0.8f,
                IsAntialias = true
            };

            var paintLigneChemin = new SKPaint
            {
                Style = SKPaintStyle.Stroke,
                Color = SKColors.Red,
                StrokeWidth = 3,
                IsAntialias = true
            };

            var paintStation = new SKPaint
            {
                Color = SKColors.Blue,
                IsAntialias = true
            };

            var paintStationChemin = new SKPaint
            {
                Color = SKColors.Red,
                IsAntialias = true
            };

            var paintTexte = new SKPaint
            {
                Color = SKColors.Black,
                TextSize = 12,
                IsAntialias = true
            };

            // Tracer les liaisons normales
            for (int i = 0; i < relations.GetLength(0); i++)
            {
                int id1 = relations[i, 0];
                int id2 = relations[i, 1];

                var s1 = stations.FirstOrDefault(s => s.idNoeud == id1);
                var s2 = stations.FirstOrDefault(s => s.idNoeud == id2);

                if (s1 == null || s2 == null) continue;

                var p1 = ConvertirCoordonnees(s1.longitude, s1.latitude, minLon, minLat, maxLon, maxLat, largeur, hauteur);
                var p2 = ConvertirCoordonnees(s2.longitude, s2.latitude, minLon, minLat, maxLon, maxLat, largeur, hauteur);

                canvas.DrawLine(p1, p2, paintLigne);
            }

            // Tracer les liaisons du chemin en rouge
            for (int i = 0; i < chemin.Count - 1; i++)
            {
                var s1 = stations.FirstOrDefault(s => s.idNoeud == chemin[i]);
                var s2 = stations.FirstOrDefault(s => s.idNoeud == chemin[i + 1]);

                if (s1 == null || s2 == null) continue;

                var p1 = ConvertirCoordonnees(s1.longitude, s1.latitude, minLon, minLat, maxLon, maxLat, largeur, hauteur);
                var p2 = ConvertirCoordonnees(s2.longitude, s2.latitude, minLon, minLat, maxLon, maxLat, largeur, hauteur);

                canvas.DrawLine(p1, p2, paintLigneChemin);
            }

            // Tracer les stations
            foreach (var s in stations)
            {
                var p = ConvertirCoordonnees(s.longitude, s.latitude, minLon, minLat, maxLon, maxLat, largeur, hauteur);

                var paint = chemin.Contains(s.idNoeud) ? paintStationChemin : paintStation;
                canvas.DrawCircle(p, chemin.Contains(s.idNoeud) ? 3.5f : 2, paint);

                string nomCourt = s.nom.Length > 20 ? s.nom.Substring(0, 20) + "…" : s.nom;
                canvas.DrawText(nomCourt, p.X + 5, p.Y - 5, paintTexte);
            }

            using var image = SKImage.FromBitmap(bitmap);
            using var data = image.Encode(SKEncodedImageFormat.Png, 100);
            using var stream = File.OpenWrite(cheminFichier);
            data.SaveTo(stream);

            Console.WriteLine("\nCarte avec chemin générée : PlanMetro.png");
            Process.Start(new ProcessStartInfo(cheminFichier) { UseShellExecute = true });
        }


        private SKPoint ConvertirCoordonnees(double lon, double lat, double minLon, double minLat, double maxLon, double maxLat, int largeur, int hauteur)
        {
            float padding = 50f;
            float x = padding + (float)((lon - minLon) / (maxLon-minLon) * (largeur - 2 * padding));
            float y = padding + (float)((maxLat - lat) / (maxLat-minLat) * (hauteur - 2 * padding));
            return new SKPoint(x, y);
        }

        private double maxLat => stations.Max(s => s.latitude);

 


    }
}
